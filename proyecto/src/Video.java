import java.awt.BorderLayout;
import java.awt.Image;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.tag.FieldKey;
import org.jaudiotagger.tag.Tag;
import org.jaudiotagger.tag.TagException;
import uk.co.caprica.vlcj.player.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.factory.discovery.NativeDiscovery;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;













/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Ixtamer
 */
public class Video extends javax.swing.JFrame {
    
    
    // Declara el reproductor de VLCJ
 
       private EmbeddedMediaPlayerComponent mediaPlayerComponent;
       
      
    
  
        
      
    

    /**
     * Creates new form Video
     */
    public Video() {
        initComponents();
        
        
        ImageIcon Labe1 = new ImageIcon(getClass().getResource("/imagnes/ññ.png/"));
        Icon fondo1 = new ImageIcon(Labe1.getImage().getScaledInstance(mm.getWidth(), mm.getHeight(), Image.SCALE_DEFAULT));   
        mm.setIcon(fondo1);
        
        //botones
        buscar_musica_tabla1.setIcon(setIcono("/imagnes/buscar.png",buscar_musica_tabla1));
        
        retrasar_video.setIcon(setIcono("/imagnes/101.png",retrasar_video));
        adelantar.setIcon(setIcono("/imagnes/102.png",adelantar));
        pausa.setIcon(setIcono("/imagnes/pausa.png",pausa));
        musica_anterior.setIcon(setIcono("/imagnes/nexan.png",musica_anterior));
        video_siguiente.setIcon(setIcono("/imagnes/nex.png",video_siguiente));
        buscar_por_nombre.setIcon(setIcono("/imagnes/buscar.png",buscar_por_nombre));
        regresar_inicio_video.setIcon(setIcono("/imagnes/atras.png",regresar_inicio_video));

        
       
        
        
      
        
       
           
     
        
             // Inicializa el reproductor
    new NativeDiscovery().discover();
    mediaPlayerComponent = new EmbeddedMediaPlayerComponent();
    

   
    jPanelVideo.setLayout(new BorderLayout());
    jPanelVideo.add(mediaPlayerComponent, BorderLayout.CENTER); 
    
    

  
    jPanelVideo.setVisible(true);
    pack();

    // Comprobar el estado de la inicialización
    if (mediaPlayerComponent.mediaPlayer().media() == null) {
        JOptionPane.showMessageDialog(this, "Error: No se pudo inicializar el reproductor de video", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    ////////////////////////////////////////////
    
    
        
    
    
        
        
           
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        buscar_musica_tabla1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_videos_ = new javax.swing.JTable();
        cantidad_de_archivos_tabla1 = new javax.swing.JButton();
        peso_de_la_tabla1_ = new javax.swing.JButton();
        as = new javax.swing.JLabel();
        nn = new javax.swing.JLabel();
        jPanelVideo = new javax.swing.JPanel();
        reproducir_video = new javax.swing.JButton();
        adelantar = new javax.swing.JButton();
        pausa = new javax.swing.JButton();
        video_siguiente = new javax.swing.JButton();
        musica_anterior = new javax.swing.JButton();
        retrasar_video = new javax.swing.JButton();
        buscar_por_nombre = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        eliminar_video_tabla1 = new javax.swing.JButton();
        mover_video_tabla1_ = new javax.swing.JButton();
        Archivos_duplicados = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        duplicado = new javax.swing.JTable();
        Eliminar_archivos_duplicados_ = new javax.swing.JButton();
        mover_archivos_duplicados__ = new javax.swing.JButton();
        limpiar_tabla_duplicados_ = new javax.swing.JButton();
        regresar_inicio_video = new javax.swing.JButton();
        Cantidad_duplicados = new javax.swing.JButton();
        cantidad_du = new javax.swing.JLabel();
        limpiar_tabla1 = new javax.swing.JButton();
        mm = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 510, 40));

        buscar_musica_tabla1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscar_musica_tabla1ActionPerformed(evt);
            }
        });
        jPanel1.add(buscar_musica_tabla1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 90, 60));

        table_videos_.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Del Archivo", "Extension", "Artista", "Albúm", "Género ", "Duracion", "Año", "Ruta ", "Tamaño"
            }
        ));
        table_videos_.setRowHeight(24);
        jScrollPane1.setViewportView(table_videos_);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 1320, 250));

        cantidad_de_archivos_tabla1.setText("Cantidad de Archivos");
        cantidad_de_archivos_tabla1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cantidad_de_archivos_tabla1ActionPerformed(evt);
            }
        });
        jPanel1.add(cantidad_de_archivos_tabla1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 350, 160, 40));

        peso_de_la_tabla1_.setText("Peso de los Archivos");
        peso_de_la_tabla1_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peso_de_la_tabla1_ActionPerformed(evt);
            }
        });
        jPanel1.add(peso_de_la_tabla1_, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 160, 40));

        as.setBackground(new java.awt.Color(255, 255, 255));
        as.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        as.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(as, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 370, 150, 60));

        nn.setBackground(new java.awt.Color(255, 255, 255));
        nn.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        nn.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(nn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 150, 50));

        jPanelVideo.setBackground(new java.awt.Color(255, 255, 255));
        jPanelVideo.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanelVideoLayout = new javax.swing.GroupLayout(jPanelVideo);
        jPanelVideo.setLayout(jPanelVideoLayout);
        jPanelVideoLayout.setHorizontalGroup(
            jPanelVideoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        jPanelVideoLayout.setVerticalGroup(
            jPanelVideoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        jPanel1.add(jPanelVideo, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 390, 480, 250));

        reproducir_video.setText("reproducir");
        reproducir_video.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reproducir_videoActionPerformed(evt);
            }
        });
        jPanel1.add(reproducir_video, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 350, 130, 40));

        adelantar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adelantarActionPerformed(evt);
            }
        });
        jPanel1.add(adelantar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 640, 90, 60));

        pausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausaActionPerformed(evt);
            }
        });
        jPanel1.add(pausa, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 640, 90, 60));

        video_siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                video_siguienteActionPerformed(evt);
            }
        });
        jPanel1.add(video_siguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 640, 90, 60));

        musica_anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musica_anteriorActionPerformed(evt);
            }
        });
        jPanel1.add(musica_anterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 640, 90, 60));

        retrasar_video.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retrasar_videoActionPerformed(evt);
            }
        });
        jPanel1.add(retrasar_video, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 640, 90, 60));

        buscar_por_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscar_por_nombreActionPerformed(evt);
            }
        });
        jPanel1.add(buscar_por_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 20, 90, 60));
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 30, 580, 40));

        eliminar_video_tabla1.setText("Eliminar");
        eliminar_video_tabla1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar_video_tabla1ActionPerformed(evt);
            }
        });
        jPanel1.add(eliminar_video_tabla1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 350, -1, 40));

        mover_video_tabla1_.setText("Mover");
        mover_video_tabla1_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mover_video_tabla1_ActionPerformed(evt);
            }
        });
        jPanel1.add(mover_video_tabla1_, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 350, -1, 40));

        Archivos_duplicados.setText("Archivos duplicados");
        Archivos_duplicados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Archivos_duplicadosActionPerformed(evt);
            }
        });
        jPanel1.add(Archivos_duplicados, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 350, -1, 40));

        duplicado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Nombre ", "Archivo"
            }
        ));
        jScrollPane2.setViewportView(duplicado);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, -1, 160));

        Eliminar_archivos_duplicados_.setText("Eliminar");
        Eliminar_archivos_duplicados_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Eliminar_archivos_duplicados_ActionPerformed(evt);
            }
        });
        jPanel1.add(Eliminar_archivos_duplicados_, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 580, -1, 40));

        mover_archivos_duplicados__.setText("Mover");
        mover_archivos_duplicados__.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mover_archivos_duplicados__ActionPerformed(evt);
            }
        });
        jPanel1.add(mover_archivos_duplicados__, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 580, -1, 40));

        limpiar_tabla_duplicados_.setText("Limpiar");
        limpiar_tabla_duplicados_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiar_tabla_duplicados_ActionPerformed(evt);
            }
        });
        jPanel1.add(limpiar_tabla_duplicados_, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 580, -1, 40));

        regresar_inicio_video.setText("Regresa");
        regresar_inicio_video.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresar_inicio_videoActionPerformed(evt);
            }
        });
        jPanel1.add(regresar_inicio_video, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 630, 130, 50));

        Cantidad_duplicados.setText("Cantidad");
        Cantidad_duplicados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cantidad_duplicadosActionPerformed(evt);
            }
        });
        jPanel1.add(Cantidad_duplicados, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 580, 90, 40));

        cantidad_du.setBackground(new java.awt.Color(255, 255, 255));
        cantidad_du.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(cantidad_du, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 620, 130, 50));

        limpiar_tabla1.setText("Limpiar");
        limpiar_tabla1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiar_tabla1ActionPerformed(evt);
            }
        });
        jPanel1.add(limpiar_tabla1, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 340, 120, 40));
        jPanel1.add(mm, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 1660, 770));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscar_musica_tabla1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscar_musica_tabla1ActionPerformed
           String ruta = jTextField1.getText();
            File carpeta = new File(ruta);
            
            if (carpeta.exists() && carpeta.isDirectory()) {
                DefaultTableModel modelo = (DefaultTableModel) table_videos_.getModel();
                modelo.setRowCount(0);

             try {       
                buscarArchivosEnCarpeta(carpeta, modelo);
             } catch (TagException | ReadOnlyFileException ex) {
              Logger.getLogger(Video.class.getName()).log(Level.SEVERE, null, ex);
            }
            } else {
                JOptionPane.showMessageDialog(this, "Ruta inválida o no es un directorio"+ "Error");
}

    }
private void buscarArchivosEnCarpeta(File carpeta, DefaultTableModel modelo) throws TagException, ReadOnlyFileException {
    File[] archivos = carpeta.listFiles();

    if (archivos != null) {
        for (int i = 0; i < archivos.length; i++) {
            File archivo = archivos[i];
            if (archivo.isDirectory()) {
                buscarArchivosEnCarpeta(archivo, modelo);
            } else if (archivo.getName().endsWith(".mp4") || archivo.getName().endsWith(".flv")) {
                procesarArchivoVideo(archivo, modelo);
            }
        }
    }
}

private void procesarArchivoMusica(File archivo, DefaultTableModel modelo) throws TagException, ReadOnlyFileException {
    try {
        AudioFile audioFile = AudioFileIO.read(archivo);
        Tag tag = audioFile.getTag();

        // Extraer los metadatos
        String nombre = tag.getFirst(FieldKey.TITLE);
        String artista = tag.getFirst(FieldKey.ARTIST);
        String album = tag.getFirst(FieldKey.ALBUM);
        String genero = tag.getFirst(FieldKey.GENRE);
        String duracion = String.valueOf(audioFile.getAudioHeader().getTrackLength());
        String año = tag.getFirst(FieldKey.YEAR);
        String extension = getFileExtension(archivo);
        String tamaño = String.valueOf(archivo.length() / 1024) + " KB";

        if (nombre == null || nombre.isEmpty()) nombre = archivo.getName();
        if (artista == null || artista.isEmpty()) artista = "Desconocido";
        if (album == null || album.isEmpty()) album = "Desconocido";
        if (genero == null || genero.isEmpty()) genero = "Desconocido";
        if (año == null || año.isEmpty()) año = "Desconocido";

        modelo.addRow(new Object[]{nombre, extension, artista, album, genero, duracion, año, archivo.getAbsolutePath(), tamaño});
    } catch (CannotReadException | IOException | InvalidAudioFrameException e) {
        JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + archivo.getName(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void procesarArchivoVideo(File archivo, DefaultTableModel modelo) {
    String nombre = archivo.getName();
    String extension = getFileExtension(archivo);
    String tamaño = String.valueOf(archivo.length() / 1024) + " KB";
    String duracion = "Desconocida";  
    String año = "Desconocido";  

    // Añadir la información a la tabla
    modelo.addRow(new Object[]{nombre, extension, "Desconocido", "Desconocido", "Desconocido", duracion, año, archivo.getAbsolutePath(), tamaño});
}

private String getFileExtension(File archivo) {
    String nombreArchivo = archivo.getName();
    int i = nombreArchivo.lastIndexOf('.');
    if (i > 0) {
        return nombreArchivo.substring(i + 1);
    }
    return "";
}

private void adelantarVideo(int segundos) {
    
    
    
    long tiempoActual = mediaPlayerComponent.mediaPlayer().status().time(); 
    long tiempoNuevo = tiempoActual + (segundos * 1000); 

   
    long duracionTotal = mediaPlayerComponent.mediaPlayer().media().info().duration(); 
    if (tiempoNuevo > duracionTotal) {
        tiempoNuevo = duracionTotal; 
    }

    mediaPlayerComponent.mediaPlayer().controls().setTime(tiempoNuevo); 
}
private void retrasarVideo(int segundos) {
    long tiempoActual = mediaPlayerComponent.mediaPlayer().status().time(); 
    long tiempoNuevo = tiempoActual - (segundos * 1000); 

   
    if (tiempoNuevo < 0) {
        tiempoNuevo = 0; 
    }

    mediaPlayerComponent.mediaPlayer().controls().setTime(tiempoNuevo); 
}
private void Pausa() {
    if (mediaPlayerComponent.mediaPlayer().status().isPlaying()) {
        mediaPlayerComponent.mediaPlayer().controls().pause(); 
    } else {
        mediaPlayerComponent.mediaPlayer().controls().play();

    
}

   
    
   
    



  


    }//GEN-LAST:event_buscar_musica_tabla1ActionPerformed

    private void cantidad_de_archivos_tabla1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cantidad_de_archivos_tabla1ActionPerformed
         DefaultTableModel modelo = (DefaultTableModel) table_videos_.getModel();
    int cantidadArchivos = modelo.getRowCount();
    

    as.setText("Cantidad de archivos: " + cantidadArchivos);

        

    }//GEN-LAST:event_cantidad_de_archivos_tabla1ActionPerformed

    private void peso_de_la_tabla1_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peso_de_la_tabla1_ActionPerformed
         DefaultTableModel modelo = (DefaultTableModel) table_videos_.getModel();

    long tamañoTotalKB = 0;

    
    for (int i = 0; i < modelo.getRowCount(); i++) {
        String tamañoStr = (String) modelo.getValueAt(i, 8); // Columna "Tamaño"
        tamañoStr = tamañoStr.replace(" KB", ""); 
        long tamañoArchivoKB = Long.parseLong(tamañoStr); 
        tamañoTotalKB += tamañoArchivoKB; 
    }


    double tamañoTotalMB = tamañoTotalKB / 1024.0;

    nn.setText(String.format("Tamaño total: %.2f MB", tamañoTotalMB));
    }//GEN-LAST:event_peso_de_la_tabla1_ActionPerformed

    private void reproducir_videoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reproducir_videoActionPerformed
      
    int filaSeleccionada = table_videos_.getSelectedRow();
    int filasegunda=duplicado.getSelectedRow();
     
    
    if (table_videos_.getSelectedRow() != -1) {
          String rutaVideo = (String) table_videos_.getValueAt(filaSeleccionada, 7);
          mediaPlayerComponent.mediaPlayer().media().play(rutaVideo);
    
    } else {
         if (duplicado.getSelectedRow() != -1) {
          String rutaVideo2 = (String) duplicado.getValueAt(filasegunda, 1);
          mediaPlayerComponent.mediaPlayer().media().play(rutaVideo2);
         }
         
    
    }
 
       
    
    }//GEN-LAST:event_reproducir_videoActionPerformed

    private void adelantarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adelantarActionPerformed
         adelantarVideo(10); // Adelanta 10 segundos
    
    }//GEN-LAST:event_adelantarActionPerformed

    private void retrasar_videoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retrasar_videoActionPerformed
           retrasarVideo(10);
    }//GEN-LAST:event_retrasar_videoActionPerformed

    private void pausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausaActionPerformed
        Pausa();
    }//GEN-LAST:event_pausaActionPerformed

    private void video_siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_video_siguienteActionPerformed
         EmbeddedMediaPlayer mediaPlayer = mediaPlayerComponent.mediaPlayer();
        int currentIndex = table_videos_.getSelectedRow(); 
        int currentIndex2 = duplicado.getSelectedRow();    


        if (currentIndex != -1) {
            int rowCount = table_videos_.getRowCount();
            if (currentIndex < rowCount - 1) {
            int nextIndex = currentIndex + 1;
            table_videos_.setRowSelectionInterval(nextIndex, nextIndex);
            String rutaVideo = (String) table_videos_.getValueAt(nextIndex, 7); 

        if (rutaVideo != null && !rutaVideo.isEmpty()) {
            if (mediaPlayer != null) {
                mediaPlayer.controls().stop();           
                mediaPlayer.media().prepare(rutaVideo);  
                mediaPlayer.controls().play();           
            } else {
                System.out.println("El mediaPlayer no está inicializado correctamente.");
            }
        } else {
            System.out.println("Ruta de video no válida en table_videos_.");
        }
    } else {
        System.out.println("Estás en el último video de table_videos_.");
    }
} else if (currentIndex2 != -1) {
    
    int rowCount2 = duplicado.getRowCount();
    if (currentIndex2 < rowCount2 - 1) { 
        int nextIndex = currentIndex2 + 1;
        duplicado.setRowSelectionInterval(nextIndex, nextIndex); 
        String rutaVideo = (String) duplicado.getValueAt(nextIndex, 1);

        if (rutaVideo != null && !rutaVideo.isEmpty()) {
            if (mediaPlayer != null) {
                mediaPlayer.controls().stop();           
                mediaPlayer.media().prepare(rutaVideo); 
                mediaPlayer.controls().play();           
            } else {
                System.out.println("El mediaPlayer no está inicializado correctamente.");
            }
        } else {
            System.out.println("Ruta de video no válida en duplicado.");
        }
    } else {
        System.out.println("Estás en el último video de duplicado.");
    }
} else {
    System.out.println("No hay ninguna fila seleccionada en ninguna de las tablas.");
}

    }//GEN-LAST:event_video_siguienteActionPerformed

    private void musica_anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musica_anteriorActionPerformed
           EmbeddedMediaPlayer mediaPlayer1 = mediaPlayerComponent.mediaPlayer();


        int currentIndex1 = table_videos_.getSelectedRow(); 
        int currentIndex2 = duplicado.getSelectedRow(); 

        if (currentIndex1 != -1) {
    
            if (currentIndex1 > 0) {
            int previousIndex = currentIndex1 - 1;
            table_videos_.setRowSelectionInterval(previousIndex, previousIndex);
            String rutaVideo = (String) table_videos_.getValueAt(previousIndex, 7);

            if (rutaVideo != null && !rutaVideo.isEmpty()) {
                if (mediaPlayer1 != null) {
                mediaPlayer1.controls().stop();
                mediaPlayer1.media().prepare(rutaVideo);
                mediaPlayer1.controls().play();
            } else {
                System.out.println("El mediaPlayer1 no está inicializado correctamente.");
            }
        } else {
            System.out.println("Ruta de video no válida en table_videos_1.");
        }
    } else {
        System.out.println("Estás en el primer video de la lista de table_videos_1.");
    }
} else if (currentIndex2 != -1) {
    
    if (currentIndex2 > 0) {
        int previousIndex = currentIndex2 - 1;
        duplicado.setRowSelectionInterval(previousIndex, previousIndex);
        String rutaVideo = (String) duplicado.getValueAt(previousIndex, 1);

        if (rutaVideo != null && !rutaVideo.isEmpty()) {
            if (mediaPlayer1 != null) {
                mediaPlayer1.controls().stop();
                mediaPlayer1.media().prepare(rutaVideo);
                mediaPlayer1.controls().play();
            } else {
                System.out.println("El mediaPlayer1 no está inicializado correctamente.");
            }
        } else {
            System.out.println("Ruta de video no válida en table_videos_2.");
        }
    } else {
        System.out.println("Estás en el primer video de la lista de table_videos_2.");
    }
} else {
    System.out.println("No hay ninguna fila seleccionada en ninguna de las tablas.");
}

    

   
    }//GEN-LAST:event_musica_anteriorActionPerformed

    private void buscar_por_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscar_por_nombreActionPerformed
         String nombreBuscado = jTextField2.getText().trim().toLowerCase();
            DefaultTableModel modeloOriginal = (DefaultTableModel) table_videos_.getModel();
            
            boolean encontrado = false;
        table_videos_.clearSelection(); 

        for (int i = 0; i < modeloOriginal.getRowCount(); i++) {
        String nombreArchivo = (String) modeloOriginal.getValueAt(i, 0); 
        if (nombreArchivo != null && nombreArchivo.toLowerCase().contains(nombreBuscado)) {
        table_videos_.addRowSelectionInterval(i, i); 
       
        table_videos_.scrollRectToVisible(table_videos_.getCellRect(i, 0, true)); 
        encontrado = true;
        break; 
    }
}
    }//GEN-LAST:event_buscar_por_nombreActionPerformed

    private void eliminar_video_tabla1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar_video_tabla1ActionPerformed
        int filaSeleccionada = table_videos_.getSelectedRow();
    if (filaSeleccionada != -1) {
        String rutaArchivo = (String) table_videos_.getValueAt(filaSeleccionada, 7); 
        File archivo = new File(rutaArchivo);
        if (archivo.delete()) {
            System.out.println("Archivo eliminado correctamente.");
        } else {
            System.out.println("No se pudo eliminar el archivo.");
        }
    }
    }//GEN-LAST:event_eliminar_video_tabla1ActionPerformed

    private void mover_video_tabla1_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mover_video_tabla1_ActionPerformed
         int filaSeleccionada = table_videos_.getSelectedRow(); 
    if (filaSeleccionada != -1) { 
        String rutaArchivo = (String) table_videos_.getValueAt(filaSeleccionada, 7);
        File archivo = new File(rutaArchivo); 

   
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar carpeta de destino");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
       
        int seleccion = fileChooser.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File carpetaDestino = fileChooser.getSelectedFile(); 
            Path destino = Paths.get(carpetaDestino.getAbsolutePath(), archivo.getName()); 

            try {
                Files.move(archivo.toPath(), destino, StandardCopyOption.REPLACE_EXISTING); 
                System.out.println("Archivo movido a: " + destino.toString()); 
            } catch (IOException e) {
                e.printStackTrace(); 
            }
        } else {
            System.out.println("Operación de movimiento cancelada."); 
        }
    } else {
        System.out.println("No hay archivo seleccionado para mover."); 
    }
    }//GEN-LAST:event_mover_video_tabla1_ActionPerformed

    private void Archivos_duplicadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Archivos_duplicadosActionPerformed
          DefaultTableModel modeloOriginal = (DefaultTableModel) table_videos_.getModel();
    DefaultTableModel modeloDuplicados = (DefaultTableModel) duplicado.getModel();
    modeloDuplicados.setRowCount(0); 

    HashSet<String> archivosEncontrados = new HashSet<>();
    String rutaEspecifica = "C:\\Users\\Ixtamer"; 

   
    explorarCarpeta(new File(rutaEspecifica), archivosEncontrados, modeloDuplicados, modeloOriginal, rutaEspecifica);

    JOptionPane.showMessageDialog(this, "Archivos duplicados detectados y listados.");
}

private void explorarCarpeta(File carpeta, HashSet<String> archivosEncontrados, DefaultTableModel modeloDuplicados, DefaultTableModel modeloOriginal, String rutaEspecifica) {
   
    File[] archivos = carpeta.listFiles();
    
    if (archivos != null) { 
    for (int j = 0; j < archivos.length; j++) {
        File archivo = archivos[j];
        if (archivo.isDirectory()) {
            explorarCarpeta(archivo, archivosEncontrados, modeloDuplicados, modeloOriginal, rutaEspecifica);
        } else if (archivo.isFile()) {
            if (!archivo.getAbsolutePath().equals(rutaEspecifica)) {
                String claveArchivo = archivo.getName() + archivo.length();

                for (int i = 0; i < modeloOriginal.getRowCount(); i++) {
                    String rutaArchivoTabla = (String) modeloOriginal.getValueAt(i, 7);
                    File archivoTabla = new File(rutaArchivoTabla);

                    
                    if (!rutaArchivoTabla.equals(archivo.getAbsolutePath()) && archivoTabla.length() == archivo.length()) {
                        System.out.println("Comparando: " + archivo.getAbsolutePath() + " con " + rutaArchivoTabla);

                  
                        modeloDuplicados.addRow(new Object[]{
                            archivo.getName(),
                            archivo.getAbsolutePath()
                        });
                    }
                }

                archivosEncontrados.add(claveArchivo);
            }
        }
    }
    }
    }//GEN-LAST:event_Archivos_duplicadosActionPerformed

    private void Eliminar_archivos_duplicados_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Eliminar_archivos_duplicados_ActionPerformed
           int filaSeleccionada = duplicado.getSelectedRow();
           
             if (filaSeleccionada != -1) {
                String rutaArchivo = (String) duplicado.getValueAt(filaSeleccionada, 1); 
                File archivo = new File(rutaArchivo);
                     if (archivo.delete()) {
                        System.out.println("Archivo eliminado correctamente.");
            } else {
                    System.out.println("No se pudo eliminar el archivo.");
        }
    }
    }//GEN-LAST:event_Eliminar_archivos_duplicados_ActionPerformed

    private void mover_archivos_duplicados__ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mover_archivos_duplicados__ActionPerformed
              int filaSeleccionada = duplicado.getSelectedRow(); 
    if (filaSeleccionada != -1) { 
        String rutaArchivo = (String) duplicado.getValueAt(filaSeleccionada, 1); 
        File archivo = new File(rutaArchivo); 

      
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar carpeta de destino");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
     
        int seleccion = fileChooser.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File carpetaDestino = fileChooser.getSelectedFile(); 
            Path destino = Paths.get(carpetaDestino.getAbsolutePath(), archivo.getName()); 

            try {
                Files.move(archivo.toPath(), destino, StandardCopyOption.REPLACE_EXISTING); 
                System.out.println("Archivo movido a: " + destino.toString()); 
            } catch (IOException e) {
                e.printStackTrace(); 
            }
        } else {
            System.out.println("Operación de movimiento cancelada."); 
        }
    } else {
        System.out.println("No hay archivo seleccionado para mover."); 
    }
    }//GEN-LAST:event_mover_archivos_duplicados__ActionPerformed

    private void limpiar_tabla_duplicados_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiar_tabla_duplicados_ActionPerformed
         DefaultTableModel modeloDuplicados = (DefaultTableModel) duplicado.getModel();
         modeloDuplicados.setRowCount(0); // Limpiar tabla de duplicados
          
    }//GEN-LAST:event_limpiar_tabla_duplicados_ActionPerformed

    private void regresar_inicio_videoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresar_inicio_videoActionPerformed
        inicio regresar = new inicio();
        regresar.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_regresar_inicio_videoActionPerformed

    private void Cantidad_duplicadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cantidad_duplicadosActionPerformed
         DefaultTableModel modelo = (DefaultTableModel) duplicado.getModel();
         int cantidadArchivos = modelo.getRowCount();
         cantidad_du.setText("Cantidad de archivos: " + cantidadArchivos);    
    }//GEN-LAST:event_Cantidad_duplicadosActionPerformed

    private void limpiar_tabla1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiar_tabla1ActionPerformed
        DefaultTableModel modeloDuplicados = (DefaultTableModel) table_videos_.getModel();
         modeloDuplicados.setRowCount(0); // Limpiar tabla de duplicados
    }//GEN-LAST:event_limpiar_tabla1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Video.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Video.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Video.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Video.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Video().setVisible(true);
        });
    }
    private Icon setIcono(String url, JButton boton) {
        
    ImageIcon ico = new ImageIcon(getClass().getResource(url));
    int ancho = boton.getWidth();
    int alto = boton.getHeight();
    return new ImageIcon(ico.getImage().getScaledInstance(ancho, alto, Image.SCALE_DEFAULT));
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Archivos_duplicados;
    private javax.swing.JButton Cantidad_duplicados;
    private javax.swing.JButton Eliminar_archivos_duplicados_;
    private javax.swing.JButton adelantar;
    private javax.swing.JLabel as;
    private javax.swing.JButton buscar_musica_tabla1;
    private javax.swing.JButton buscar_por_nombre;
    private javax.swing.JButton cantidad_de_archivos_tabla1;
    private javax.swing.JLabel cantidad_du;
    private javax.swing.JTable duplicado;
    private javax.swing.JButton eliminar_video_tabla1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelVideo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton limpiar_tabla1;
    private javax.swing.JButton limpiar_tabla_duplicados_;
    private javax.swing.JLabel mm;
    private javax.swing.JButton mover_archivos_duplicados__;
    private javax.swing.JButton mover_video_tabla1_;
    private javax.swing.JButton musica_anterior;
    private javax.swing.JLabel nn;
    private javax.swing.JButton pausa;
    private javax.swing.JButton peso_de_la_tabla1_;
    private javax.swing.JButton regresar_inicio_video;
    private javax.swing.JButton reproducir_video;
    private javax.swing.JButton retrasar_video;
    private javax.swing.JTable table_videos_;
    private javax.swing.JButton video_siguiente;
    // End of variables declaration//GEN-END:variables
}
